// Autogenerated by metajava.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Response.java
package com.rethinkdb.response;

import com.rethinkdb.proto.ResponseType;
import com.rethinkdb.proto.ResponseNote;
import org.json.simple.*;
import org.json.simple.

import java.util.*;
import java.nio.ByteBuffer;

private class ResponseHandler extends

public class Response {
    public final long token;
    public final ResponseType responseType;
    public final ArrayList<ResponseNote> responseNotes;

    public static Response parseFrom(token, byte[] buf) {
        JSONParser parser = new JSONParser();
        // TODO: allow the network stream to go straight here so we
        // can parse as we're reading from the network
        Reader byteReader = InputStreamReader(ByteArrayInputStream(buf), "UTF-8");

        parser.parse(byteReader,
        JSONObject respObj = JSONValue.parse(
            InputStreamReader(
                ByteArrayInputStream(buf), "UTF-8"));
    }

    public Response(long token,
                     ResponseType responseType,
                     ArrayList<ResponseNote> responseNotes) {
        this.token = token;
        this.responseType = responseType;
        this.responseNotes = responseNotes;
    }

    public static Response<Cursor> empty() {
        return new Response(null, (Cursor) null, Optional.empty());
    }

    public Datum getResponse() {
        throw new RuntimeException("getResponse not implemented");
    }

    public Datum getResponse(int x) {
        throw new RuntimeException("getResponse:1 not implemented");
    }

    public <T> List<T> getResponseList() {
        throw new RuntimeException("getResponseList not implemented");
    }

    public boolean isWaitComplete() {
        return responseType == ResponseType.WAIT_COMPLETE;
    }

    /* Autogenerated methods below */

    /* Whether the response is any kind of feed */
    public boolean isFeed() {
        return responseNotes.contains(ResponseNote.SEQUENCE_FEED)
            || responseNotes.contains(ResponseNote.ATOM_FEED)
            || responseNotes.contains(ResponseNote.ORDER_BY_LIMIT_FEED)
            || responseNotes.contains(ResponseNote.UNIONED_FEED);
    }

    /* If the response has a given kind of note (only used by feeds currently) */
    public boolean isSequenceFeed() {
        return responseNotes.contains(ResponseNote.SEQUENCE_FEED);
    }
    public boolean isAtomFeed() {
        return responseNotes.contains(ResponseNote.ATOM_FEED);
    }
    public boolean isOrderByLimitFeed() {
        return responseNotes.contains(ResponseNote.ORDER_BY_LIMIT_FEED);
    }
    public boolean isUnionedFeed() {
        return responseNotes.contains(ResponseNote.UNIONED_FEED);
    }
    public boolean includesStates() {
        return responseNotes.contains(ResponseNote.INCLUDES_STATES);
    }

    /* Whether the response is any kind of error */
    public boolean isError() {
        return responseType == ResponseType.CLIENT_ERROR
            || responseType == ResponseType.COMPILE_ERROR
            || responseType == ResponseType.RUNTIME_ERROR;
    }

    /* What type of success the response contains */
    public boolean isAtom() {
        return responseType == ResponseType.SUCCESS_ATOM;
    }
    public boolean isSequence() {
        return responseType == ResponseType.SUCCESS_SEQUENCE;
    }
    public boolean isPartial() {
        return responseType == ResponseType.SUCCESS_PARTIAL;
    }
}
