package com.rethinkdb.response;

import com.rethinkdb.proto.ResponseType;
import com.rethinkdb.proto.ResponseNote;

import java.util.*;
import java.nio.ByteBuffer;

public class Response {
    private long token;
    private ResponseType responseType;
    private ArrayList<ResponseNote> responseNotes;

    public Response(){
        throw new RuntimeException("Response constructor not implemented");
    }

    public ResponseType getType() {
        return responseType;
    }

    public long getToken() {
        return token;
    }

    public Datum getResponse() {
        throw new RuntimeException("getResponse not implemented");
    }

    public Datum getResponse(int x) {
        throw new RuntimeException("getResponse:1 not implemented");
    }

    public <T> List<T> getResponseList() {
        throw new RuntimeException("getResponseList not implemented");
    }

    public static Response parseFrom(byte[] buf) {
        throw new RuntimeException("parseFrom not implemented");
    }

    public boolean isWaitComplete() {
        return responseType == ResponseType.WAIT_COMPLETE;
    }

    /* Autogenerated methods below */

    /* Whether the response is any kind of feed */
    public boolean isFeed() {
        return ${"\n            || ".join(
                "responseNotes.contains(ResponseNote.{})".format(note_name)
                for note_name in proto['Response']['ResponseNote'].keys()
                if note_name.endswith('_FEED'))};
    }

    /* If the response has a given kind of note (only used by feeds currently) */
    % for note_name in proto['Response']['ResponseNote'].keys():
    public boolean ${"is"+camel(note_name) if note_name.endswith('_FEED') else dromedary(note_name)}() {
        return responseNotes.contains(ResponseNote.${note_name});
    }
    % endfor

    /* Whether the response is any kind of error */
    public boolean isError() {
        return ${"\n            || ".join(
                "responseType == ResponseType.{}".format(error_type)
                for error_type in proto['Response']['ResponseType'].keys()
                if error_type.endswith('_ERROR'))};
    }

    /* What type of success the response contains */
    % for success_type in proto['Response']['ResponseType'].keys():
        % if success_type.startswith('SUCCESS_'):
    public boolean ${"is"+camel(success_type[8:])}() {
        return responseType == ResponseType.${success_type};
    }
        % endif
    % endfor
}
